---
name: Build minotari text explorer docker image

'on':
  push:
    paths-ignore:
      - '**/*.md'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]*'
    branches:
      # - 'build_dockers*'
      - 'build-*'
  schedule:
    - cron: '05 00 * * *'
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: 'override image tag/version'
      tag_alias:
        type: string
        description: 'image tag alias'
  workflow_call:
    secrets:
      DOCKER_PROVIDER:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      DOCKER_REPO:
        required: true

env:
  TARI_REPO: tari-project/tari
  TARI_BRANCH: development
  DOCKER_IMAGE: minotari_text_explorer

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker_build:
    name: Docker building
    strategy:
      fail-fast: false

    runs-on: ubuntu-latest

    steps:
      - name: Checkout tari-explorer
        uses: actions/checkout@v4
        with:
          path: tari-explorer

      - name: Checkout tari
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARI_REPO }}
          ref: ${{ env.TARI_BRANCH }}
          path: tari-project-tari

      - name: Prep docker build environment 
        shell: bash
        run: |
            ls -alht
            mkdir -p tari-explorer/external_libs
            cp -vr tari-project-tari/clients/nodejs/base_node_grpc_client tari-explorer/external_libs/
            # mkdir -p tari-explorer/external_libs/base_node_grpc_client/proto
            cp -vr tari-project-tari/applications/minotari_app_grpc/proto tari-explorer/external_libs/base_node_grpc_client/
            ls -alhtR tari-explorer/external_libs
            if [ -z "${{ inputs.version }}" ] ; then
              VBRANCH=$(git --git-dir tari-explorer/.git branch --show-current)
              VSHA_SHORT=$(git --git-dir tari-explorer/.git rev-parse --short HEAD)
              VERSION="${VBRANCH}_$(date -u '+%Y%m%d')_${VSHA_SHORT}"
            else
              VERSION=${{ inputs.version }}
            fi
            echo "Setting ${VERSION} as docker tag"
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
            if [ ! -z "${{ inputs.tag_alias }}" ] ; then
              echo "Setup tag_alias"
              echo "TAG_ALIAS=${{ secrets.DOCKER_PROVIDER }}/${{ secrets.DOCKER_REPO }}/${{ env.DOCKER_IMAGE }}:${{ inputs.tag_alias }}" >> $GITHUB_ENV
            fi

      - name: Set up QEMU for Docker
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            #name/${{ github.repository }}
            #ghcr.io/${{ github.repository }}
            #ghcr.io/${{ github.repository_owner }}/${{ github.repository }}
            #ghcr.io/${{ github.repository_owner }}
            ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          #username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Image Provider
        # Debug
        # if: ${{ false }}
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_PROVIDER }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker image build and push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: ./tari-explorer/
          file: ./tari-explorer/Dockerfile
          platforms: linux/arm64, linux/amd64
          push: true
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ env.VERSION }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ secrets.DOCKER_PROVIDER }}/${{ secrets.DOCKER_REPO }}/${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
            ${{ env.TAG_ALIAS }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
